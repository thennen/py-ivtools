import numpy as np
import pandas as pd

# Alex got this data by email, locations of dies and of modules relative to die location:

# Locations should be in microns, with some crazy offset
# We think the offset is to some camera far off the chuck location inside the prober
# We don't know which point of the die these locations refer to
# +Y pointing down
# +X pointing right
ff_dict = {1: (1244257, 4820926),
           2: (1362879, 4820926),
           3: (1481501, 4820926),
           4: (1600123, 4820926),
           5: (1718745, 4820926),
           6: (1837367, 4820926),
           7: (1955989, 4740824),
           8: (1837367, 4740824),
           9: (1718745, 4740824),
           10: (1600123, 4740824),
           11: (1481501, 4740824),
           12: (1362879, 4740824),
           13: (1244257, 4740824),
           14: (1125635, 4740824),
           15: (1007013, 4660722),
           16: (1125635, 4660722),
           17: (1244257, 4660722),
           18: (1362879, 4660722),
           19: (1481501, 4660722),
           20: (1600123, 4660722),
           21: (1718745, 4660722),
           22: (1837367, 4660722),
           23: (1955989, 4660722),
           24: (2074611, 4660722),
           25: (2193233, 4580620),
           26: (2074611, 4580620),
           27: (1955989, 4580620),
           28: (1837367, 4580620),
           29: (1718745, 4580620),
           30: (1600123, 4580620),
           31: (1481501, 4580620),
           32: (1362879, 4580620),
           33: (1244257, 4580620),
           34: (1125635, 4580620),
           35: (1007013, 4580620),
           36: (888391, 4580620),
           37: (888391, 4500518),
           38: (1007013, 4500518),
           39: (1125635, 4500518),
           40: (1244257, 4500518),
           41: (1362879, 4500518),
           42: (1481501, 4500518),
           43: (1600123, 4500518),
           44: (1718745, 4500518),
           45: (1837367, 4500518),
           46: (1955989, 4500518),
           47: (2074611, 4500518),
           48: (2193233, 4500518),
           49: (2311855, 4420416),
           50: (2193233, 4420416),
           51: (2074611, 4420416),
           52: (1955989, 4420416),
           53: (1837367, 4420416),
           54: (1718745, 4420416),
           55: (1600123, 4420416),
           56: (1481501, 4420416),
           57: (1362879, 4420416),
           58: (1244257, 4420416),
           59: (1125635, 4420416),
           60: (1007013, 4420416),
           61: (888391, 4420416),
           62: (769769, 4420416),
           63: (769769, 4340314),
           64: (888391, 4340314),
           65: (1007013, 4340314),
           66: (1125635, 4340314),
           67: (1244257, 4340314),
           68: (1362879, 4340314),
           69: (1481501, 4340314),
           70: (1600123, 4340314),
           71: (1718745, 4340314),
           72: (1837367, 4340314),
           73: (1955989, 4340314),
           74: (2074611, 4340314),
           75: (2193233, 4340314),
           76: (2311855, 4340314),
           77: (2311855, 4260212),
           78: (2193233, 4260212),
           79: (2074611, 4260212),
           80: (1955989, 4260212),
           81: (1837367, 4260212),
           82: (1718745, 4260212),
           83: (1600123, 4260212),
           84: (1481501, 4260212),
           85: (1362879, 4260212),
           86: (1244257, 4260212),
           87: (1125635, 4260212),
           88: (1007013, 4260212),
           89: (888391, 4260212),
           90: (769769, 4260212),
           91: (651147, 4180110),
           92: (769769, 4180110),
           93: (888391, 4180110),
           94: (1007013, 4180110),
           95: (1125635, 4180110),
           96: (1244257, 4180110),
           97: (1362879, 4180110),
           98: (1481501, 4180110),
           99: (1600123, 4180110),
           100: (1718745, 4180110),
           101: (1837367, 4180110),
           102: (1955989, 4180110),
           103: (2074611, 4180110),
           104: (2193233, 4180110),
           105: (2311855, 4180110),
           106: (2430477, 4180110),
           107: (2430477, 4100008),
           108: (2311855, 4100008),
           109: (2193233, 4100008),
           110: (2074611, 4100008),
           111: (1955989, 4100008),
           112: (1837367, 4100008),
           113: (1718745, 4100008),
           114: (1600123, 4100008),
           115: (1481501, 4100008),
           116: (1362879, 4100008),
           117: (1244257, 4100008),
           118: (1125635, 4100008),
           119: (1007013, 4100008),
           120: (888391, 4100008),
           121: (769769, 4100008),
           122: (651147, 4100008),
           123: (651147, 4019906),
           124: (769769, 4019906),
           125: (888391, 4019906),
           126: (1007013, 4019906),
           127: (1125635, 4019906),
           128: (1244257, 4019906),
           129: (1362879, 4019906),
           130: (1481501, 4019906),
           131: (1600123, 4019906),
           132: (1718745, 4019906),
           133: (1837367, 4019906),
           134: (1955989, 4019906),
           135: (2074611, 4019906),
           136: (2193233, 4019906),
           137: (2311855, 4019906),
           138: (2430477, 4019906),
           139: (2430477, 3939804),
           140: (2311855, 3939804),
           141: (2193233, 3939804),
           142: (2074611, 3939804),
           143: (1955989, 3939804),
           144: (1837367, 3939804),
           145: (1718745, 3939804),
           146: (1600123, 3939804),
           147: (1481501, 3939804),
           148: (1362879, 3939804),
           149: (1244257, 3939804),
           150: (1125635, 3939804),
           151: (1007013, 3939804),
           152: (888391, 3939804),
           153: (769769, 3939804),
           154: (651147, 3939804),
           155: (651147, 3859702),
           156: (769769, 3859702),
           157: (888391, 3859702),
           158: (1007013, 3859702),
           159: (1125635, 3859702),
           160: (1244257, 3859702),
           161: (1362879, 3859702),
           162: (1481501, 3859702),
           163: (1600123, 3859702),
           164: (1718745, 3859702),
           165: (1837367, 3859702),
           166: (1955989, 3859702),
           167: (2074611, 3859702),
           168: (2193233, 3859702),
           169: (2311855, 3859702),
           170: (2430477, 3859702),
           171: (2430477, 3779600),
           172: (2311855, 3779600),
           173: (2193233, 3779600),
           174: (2074611, 3779600),
           175: (1955989, 3779600),
           176: (1837367, 3779600),
           177: (1718745, 3779600),
           178: (1600123, 3779600),
           179: (1481501, 3779600),
           180: (1362879, 3779600),
           181: (1244257, 3779600),
           182: (1125635, 3779600),
           183: (1007013, 3779600),
           184: (888391, 3779600),
           185: (769769, 3779600),
           186: (651147, 3779600),
           187: (651147, 3699498),
           188: (769769, 3699498),
           189: (888391, 3699498),
           190: (1007013, 3699498),
           191: (1125635, 3699498),
           192: (1244257, 3699498),
           193: (1362879, 3699498),
           194: (1481501, 3699498),
           195: (1600123, 3699498),
           196: (1718745, 3699498),
           197: (1837367, 3699498),
           198: (1955989, 3699498),
           199: (2074611, 3699498),
           200: (2193233, 3699498),
           201: (2311855, 3699498),
           202: (2430477, 3699498),
           203: (2311855, 3619396),
           204: (2193233, 3619396),
           205: (2074611, 3619396),
           206: (1955989, 3619396),
           207: (1837367, 3619396),
           208: (1718745, 3619396),
           209: (1600123, 3619396),
           210: (1481501, 3619396),
           211: (1362879, 3619396),
           212: (1244257, 3619396),
           213: (1125635, 3619396),
           214: (1007013, 3619396),
           215: (888391, 3619396),
           216: (769769, 3619396),
           217: (769769, 3539294),
           218: (888391, 3539294),
           219: (1007013, 3539294),
           220: (1125635, 3539294),
           221: (1244257, 3539294),
           222: (1362879, 3539294),
           223: (1481501, 3539294),
           224: (1600123, 3539294),
           225: (1718745, 3539294),
           226: (1837367, 3539294),
           227: (1955989, 3539294),
           228: (2074611, 3539294),
           229: (2193233, 3539294),
           230: (2311855, 3539294),
           231: (2311855, 3459192),
           232: (2193233, 3459192),
           233: (2074611, 3459192),
           234: (1955989, 3459192),
           235: (1837367, 3459192),
           236: (1718745, 3459192),
           237: (1600123, 3459192),
           238: (1481501, 3459192),
           239: (1362879, 3459192),
           240: (1244257, 3459192),
           241: (1125635, 3459192),
           242: (1007013, 3459192),
           243: (888391, 3459192),
           244: (769769, 3459192),
           245: (888391, 3379090),
           246: (1007013, 3379090),
           247: (1125635, 3379090),
           248: (1244257, 3379090),
           249: (1362879, 3379090),
           250: (1481501, 3379090),
           251: (1600123, 3379090),
           252: (1718745, 3379090),
           253: (1837367, 3379090),
           254: (1955989, 3379090),
           255: (2074611, 3379090),
           256: (2193233, 3379090),
           257: (2193233, 3298988),
           258: (2074611, 3298988),
           259: (1955989, 3298988),
           260: (1837367, 3298988),
           261: (1718745, 3298988),
           262: (1600123, 3298988),
           263: (1481501, 3298988),
           264: (1362879, 3298988),
           265: (1244257, 3298988),
           266: (1125635, 3298988),
           267: (1007013, 3298988),
           268: (888391, 3298988),
           269: (1007013, 3218886),
           270: (1125635, 3218886),
           271: (1244257, 3218886),
           272: (1362879, 3218886),
           273: (1481501, 3218886),
           274: (1600123, 3218886),
           275: (1718745, 3218886),
           276: (1837367, 3218886),
           277: (1955989, 3218886),
           278: (2074611, 3218886),
           279: (1955989, 3138784),
           280: (1837367, 3138784),
           281: (1718745, 3138784),
           282: (1600123, 3138784),
           283: (1481501, 3138784),
           284: (1362879, 3138784),
           285: (1244257, 3138784),
           286: (1125635, 3138784),
           287: (1244257, 3058682),
           288: (1362879, 3058682),
           289: (1481501, 3058682),
           290: (1600123, 3058682),
           291: (1718745, 3058682),
           292: (1837367, 3058682)}

# Confirm understanding of coordinate system
#for k,(x,y) in ff_dict.items():
#    plt.text(x, y, str(k))
#gca().invert_yaxis()
#plt.xlim(420509.15167326666, 2845363.331419379)
#plt.ylim(5250417.760709418, 2545051.5173949297)

# These are the x,y coordinates of the modules relative to some place on the die
# In totally different coordinate system and units from ff_dict
# They are in units of micron/10 for some reason
# Referenced to the bottom left device (002_1), +x right, +y up
mod_dict = {'001':  [11506.599999999999, 4000.0],
          '001B': [11014.459999999999, 4000.0],
          '001C': [11014.459999999999, 2000.0],
          '001D': [8788.7869999999984, 6000.0],
          '001E': [8788.7869999999984, 4000.0],
          '001F': [8788.7869999999984, 2000.0],
          '001G': [2405.6860000000001, 4000.0],
          '001H': [3280.5240000000003, 4000.0],
          '001I': [7301.8630000000003, 4000.0],
          '002':  [0.0, 0.0],
          '002B': [1432.3999999999999, 0.0],
          '003':  [2864.8000000000002, 0.0],
          '004':  [5729.6000000000004, 0.0],
          '004B': [4297.1000000000004, 0.0],
          '004C': [5729.6000000000004, 6000.0],
          '005':  [9917.25, 6000.0],
          '006':  [6907.1000000000004, 2000.0],
          '007':  [5729.6000000000004, 4000.0],
          '008':  [7700.8500000000004, 0.0],
          '009':  [11506.599999999999, 0.0],
          '010':  [11506.599999999999, 2000.0],
          '011':  [0.0, 2000.0],
          '011B': [1432.3999999999999, 2000.0],
          '012':  [2864.8000000000002, 2000.0],
          '013':  [5735.6000000000004, 2000.0],
          '013B': [4297.1000000000004, 2000.0],
          '014':  [8267.3499999999985, 2000.0],
          '014B': [7700.8500000000004, 4000.0],
          '014C': [7700.8500000000004, 2000.0],
          '014D': [1432.3999999999999, 6000.0],
          '014E': [1432.3999999999999, 4000.0],
          '014F': [8788.7869999999984, 0.0],
          '014G': [11014.459999999999, 0.0],
          '014H': [1017.2249999999999, 6000.0],
          '014I': [1017.2249999999999, 4000.0],
          '015':  [0.0, 4000.0],
          '016':  [9917.25, 4000.0],
          '016B': [4297.1000000000004, 6000.0],
          '017':  [9917.25, 2000.0],
          '017B': [4297.1000000000004, 4000.0],
          '018':  [9917.25, 0.0],
          '019':  [2864.8000000000002, 6000.0],
          '020':  [2864.8000000000002, 4000.0],
          '022':  [8267.3499999999985, 6000.0],
          '023':  [6907.1000000000004, 0.0],
          '024':  [6907.1000000000004, 4000.0],
          '025':  [6084.8000000000002, 4000.0],
          '026':  [6084.8000000000002, 0.0],
          '027':  [6084.8000000000002, 6000.0],
          '028':  [6907.1000000000004, 6000.0],
          '029':  [7700.8500000000004, 6000.0],
          '030':  [8267.3499999999985, 0.0],
          '031':  [6084.8000000000002, 2000.0],
          '032':  [11506.599999999999, 6000.0],
          '033':  [8267.3499999999985, 4000.0],
          '034':  [0.0, 6000.0]}
mod_dict = {k:(x*10, -y*10) for k,(x,y) in mod_dict.items()}

# Confirm understanding of coordinate system
#plt.figure()
#for k,(x,y) in ff_dict.items():
#    plt.text(x, y, str(k))
#gca().invert_yaxis()
#plt.xlim(-16647.01316746185, 141452.12947821213)
#plt.ylim(20458.35845360716, -82514.06000031461)

# Turn those dicts into dataframes
ffcoords = {k:[np.int32(v) for v in values] for k,values in ff_dict.items()}
die_coords = pd.DataFrame.from_dict(ffcoords, orient='index')
die_coords.columns = ['die_x', 'die_y']

module_coords = pd.DataFrame.from_dict(mod_dict, orient='index').reset_index()
module_coords.columns = ['module', 'module_x', 'module_y']
module_coords['module_num'] = module_coords['module'].apply(lambda s: int(s[:3]))

#devicenums = np.arange(1,13)
#device_y = pd.DataFrame((devicenums-1) * -1600, index=devicenums, columns=['device_y'])

# Typed these in by hand!!!
# TODO: don't read from excel file, put the information here
# This has information about which dies are on which 2x2 coupon
die_info = pd.read_excel(r'Lassen.xlsx', sheetname='coupon_die')
# Join with die location data
die_info.index = die_info.die
# Messed up the relative die definition due to ridiculous y axis flip
#die_info['die_rel'] = [{1:3, 2:4, 3:1, 4:2}[v] for v in die_info['die_rel']]
die_info = die_info.join(die_coords)
#die_info.to_pickle('die_locations.pickle')

'''
# Make a plot to check for mistakes
ucolors = ('#4D4D4D',
           '#5DA5DA',
           '#FAA43A',
           '#60BD68',
           '#F17CB0',
           '#B2912F',
           '#B276B2',
           '#DECF3F',
           '#F15854')
from itertools import cycle
ccycle = cycle(ucolors)
gp = lassen.groupby('coupon')
colors = gp.apply(lambda x: next(ccycle))
figure()
for index, row in lassen.iterrows():
    plt.annotate(row.die, (row.die_x, row.die_y), color=colors[row.coupon])
xlim((min([p[0] for p in ffcoords.values()]), max([p[0] for p in ffcoords.values()])))
ylim((min([p[1] for p in ffcoords.values()]), max([p[1] for p in ffcoords.values()])))
'''

# TODO: don't read from excel file, put the information here
# This one just has a layout for each module type
module_info = pd.read_excel('Lassen.xlsx', sheetname='module_info')
# Merging with the module coords will give a column for every device on every module
module_info = pd.merge(module_info, module_coords, on='module_num')

# Finally, merging with the die information will give a column for every single device on the wafer
die_info['key'] = 1
module_info['key'] = 1
wafer_info = pd.merge(die_info, module_info, on='key').drop('key', axis=1)

wafer_info['device_y'] = (wafer_info['device_row'] - 1) * -1600

wafer_info = wafer_info.sort_values(by=['die', 'module', 'R_series'])

# Convert to sensible datatypes
# Both for saving space and for not representing obvious ints as decimals during string formatting
typedict = dict(coupon=np.uint8,
                die=np.uint16,
                die_rel=np.uint8,
                die_x=np.int32,
                die_y=np.int32,
                module_num=np.uint8,
                device=np.uint8,
                pad_top=np.uint8,
                pad_bottom=np.uint8,
                width_nm=np.uint16,
                area=np.uint32,
                R_series=np.uint32,
                module=str,
                module_x=np.float32,
                module_y=np.float32)

for k,v in typedict.items():
    wafer_info[k] = wafer_info[k].astype(v)

# I don't really care to have a data column specifying the die and module locations
# I really just want the individual device locations on the wafer
wafer_info['wX'] = wafer_info['die_x'] + wafer_info['module_x']
wafer_info['wY'] = wafer_info['die_y'] + wafer_info['module_y'] + wafer_info['device_y']
wafer_info = wafer_info.drop(['die_x', 'die_y', 'module_x', 'module_y', 'device_y'], 1)

# TODO: subtract an offset from x and y locations

wafer_info.to_pickle('all_lassen_device_info.pkl')
wafer_info.to_excel('all_lassen_device_info.xlsx', index=False)

#plt.figure()
#for k,g in wafer_info.groupby('die'):
#    plt.text(g.wX.mean(), g.wY.mean(), g.die_rel.iloc[0])
#gca().invert_yaxis()
#plt.xlim(596525.212505817, 2655013.0632123053)
#plt.ylim(4946825.3228602875, 2835648.7748716054)

# Useful to have coupon info
coupon_info = wafer_info[wafer_info.coupon == 40].drop(['die', 'coupon'], 1)
# Make all coordinates referenced to bottom left device mod 002, device 1
home = coupon_info[(coupon_info['module'] == '002') & (coupon_info['device'] == 1) & (coupon_info['die_rel'] == 3)].iloc[0]
coupon_info['wX'] -= home.wX
coupon_info['wY'] -= home.wY
coupon_info['wY'] = -coupon_info['wY']
coupon_info.to_pickle('lassen_coupon_info.pkl')
coupon_info.to_excel('lassen_coupon_info.xlsx')
